// Package gen_authorization_permissions provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package gen_authorization_permissions

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/gin-gonic/gin"
	externalRef0 "github.com/ooqls/go-auth/api/v1/gen"
)

// CreatePermissionRequest defines model for CreatePermissionRequest.
type CreatePermissionRequest struct {
	Permission externalRef0.Permission `json:"permission"`
}

// CreatePermissionResponse defines model for CreatePermissionResponse.
type CreatePermissionResponse struct {
	Permission externalRef0.Permission `json:"permission"`
}

// DeleteAuthPermissionJSONRequestBody defines body for DeleteAuthPermission for application/json ContentType.
type DeleteAuthPermissionJSONRequestBody = externalRef0.DeleteRequest

// PostAuthPermissionJSONRequestBody defines body for PostAuthPermission for application/json ContentType.
type PostAuthPermissionJSONRequestBody = CreatePermissionRequest

// PutAuthPermissionJSONRequestBody defines body for PutAuthPermission for application/json ContentType.
type PutAuthPermissionJSONRequestBody = externalRef0.UpdateRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// DeleteAuthPermissionWithBody request with any body
	DeleteAuthPermissionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteAuthPermission(ctx context.Context, body DeleteAuthPermissionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAuthPermission request
	GetAuthPermission(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAuthPermissionWithBody request with any body
	PostAuthPermissionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAuthPermission(ctx context.Context, body PostAuthPermissionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAuthPermissionWithBody request with any body
	PutAuthPermissionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAuthPermission(ctx context.Context, body PutAuthPermissionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) DeleteAuthPermissionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAuthPermissionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAuthPermission(ctx context.Context, body DeleteAuthPermissionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAuthPermissionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAuthPermission(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAuthPermissionRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAuthPermissionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthPermissionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAuthPermission(ctx context.Context, body PostAuthPermissionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthPermissionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAuthPermissionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAuthPermissionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAuthPermission(ctx context.Context, body PutAuthPermissionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAuthPermissionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewDeleteAuthPermissionRequest calls the generic DeleteAuthPermission builder with application/json body
func NewDeleteAuthPermissionRequest(server string, body DeleteAuthPermissionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteAuthPermissionRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteAuthPermissionRequestWithBody generates requests for DeleteAuthPermission with any type of body
func NewDeleteAuthPermissionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/permission")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAuthPermissionRequest generates requests for GetAuthPermission
func NewGetAuthPermissionRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/permission")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAuthPermissionRequest calls the generic PostAuthPermission builder with application/json body
func NewPostAuthPermissionRequest(server string, body PostAuthPermissionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAuthPermissionRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAuthPermissionRequestWithBody generates requests for PostAuthPermission with any type of body
func NewPostAuthPermissionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/permission")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutAuthPermissionRequest calls the generic PutAuthPermission builder with application/json body
func NewPutAuthPermissionRequest(server string, body PutAuthPermissionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAuthPermissionRequestWithBody(server, "application/json", bodyReader)
}

// NewPutAuthPermissionRequestWithBody generates requests for PutAuthPermission with any type of body
func NewPutAuthPermissionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/permission")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// DeleteAuthPermissionWithBodyWithResponse request with any body
	DeleteAuthPermissionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteAuthPermissionResponse, error)

	DeleteAuthPermissionWithResponse(ctx context.Context, body DeleteAuthPermissionJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteAuthPermissionResponse, error)

	// GetAuthPermissionWithResponse request
	GetAuthPermissionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAuthPermissionResponse, error)

	// PostAuthPermissionWithBodyWithResponse request with any body
	PostAuthPermissionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAuthPermissionResponse, error)

	PostAuthPermissionWithResponse(ctx context.Context, body PostAuthPermissionJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAuthPermissionResponse, error)

	// PutAuthPermissionWithBodyWithResponse request with any body
	PutAuthPermissionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAuthPermissionResponse, error)

	PutAuthPermissionWithResponse(ctx context.Context, body PutAuthPermissionJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAuthPermissionResponse, error)
}

type DeleteAuthPermissionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *externalRef0.DeleteResponse
}

// Status returns HTTPResponse.Status
func (r DeleteAuthPermissionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAuthPermissionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAuthPermissionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]externalRef0.Permission
}

// Status returns HTTPResponse.Status
func (r GetAuthPermissionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAuthPermissionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAuthPermissionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreatePermissionResponse
}

// Status returns HTTPResponse.Status
func (r PostAuthPermissionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAuthPermissionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAuthPermissionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *externalRef0.Permission
}

// Status returns HTTPResponse.Status
func (r PutAuthPermissionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAuthPermissionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// DeleteAuthPermissionWithBodyWithResponse request with arbitrary body returning *DeleteAuthPermissionResponse
func (c *ClientWithResponses) DeleteAuthPermissionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteAuthPermissionResponse, error) {
	rsp, err := c.DeleteAuthPermissionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAuthPermissionResponse(rsp)
}

func (c *ClientWithResponses) DeleteAuthPermissionWithResponse(ctx context.Context, body DeleteAuthPermissionJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteAuthPermissionResponse, error) {
	rsp, err := c.DeleteAuthPermission(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAuthPermissionResponse(rsp)
}

// GetAuthPermissionWithResponse request returning *GetAuthPermissionResponse
func (c *ClientWithResponses) GetAuthPermissionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAuthPermissionResponse, error) {
	rsp, err := c.GetAuthPermission(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAuthPermissionResponse(rsp)
}

// PostAuthPermissionWithBodyWithResponse request with arbitrary body returning *PostAuthPermissionResponse
func (c *ClientWithResponses) PostAuthPermissionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAuthPermissionResponse, error) {
	rsp, err := c.PostAuthPermissionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthPermissionResponse(rsp)
}

func (c *ClientWithResponses) PostAuthPermissionWithResponse(ctx context.Context, body PostAuthPermissionJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAuthPermissionResponse, error) {
	rsp, err := c.PostAuthPermission(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthPermissionResponse(rsp)
}

// PutAuthPermissionWithBodyWithResponse request with arbitrary body returning *PutAuthPermissionResponse
func (c *ClientWithResponses) PutAuthPermissionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAuthPermissionResponse, error) {
	rsp, err := c.PutAuthPermissionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAuthPermissionResponse(rsp)
}

func (c *ClientWithResponses) PutAuthPermissionWithResponse(ctx context.Context, body PutAuthPermissionJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAuthPermissionResponse, error) {
	rsp, err := c.PutAuthPermission(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAuthPermissionResponse(rsp)
}

// ParseDeleteAuthPermissionResponse parses an HTTP response from a DeleteAuthPermissionWithResponse call
func ParseDeleteAuthPermissionResponse(rsp *http.Response) (*DeleteAuthPermissionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAuthPermissionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.DeleteResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAuthPermissionResponse parses an HTTP response from a GetAuthPermissionWithResponse call
func ParseGetAuthPermissionResponse(rsp *http.Response) (*GetAuthPermissionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAuthPermissionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []externalRef0.Permission
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAuthPermissionResponse parses an HTTP response from a PostAuthPermissionWithResponse call
func ParsePostAuthPermissionResponse(rsp *http.Response) (*PostAuthPermissionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAuthPermissionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreatePermissionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutAuthPermissionResponse parses an HTTP response from a PutAuthPermissionWithResponse call
func ParsePutAuthPermissionResponse(rsp *http.Response) (*PutAuthPermissionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAuthPermissionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.Permission
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (DELETE /auth/permission)
	DeleteAuthPermission(c *gin.Context)

	// (GET /auth/permission)
	GetAuthPermission(c *gin.Context)

	// (POST /auth/permission)
	PostAuthPermission(c *gin.Context)

	// (PUT /auth/permission)
	PutAuthPermission(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// DeleteAuthPermission operation middleware
func (siw *ServerInterfaceWrapper) DeleteAuthPermission(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteAuthPermission(c)
}

// GetAuthPermission operation middleware
func (siw *ServerInterfaceWrapper) GetAuthPermission(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAuthPermission(c)
}

// PostAuthPermission operation middleware
func (siw *ServerInterfaceWrapper) PostAuthPermission(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostAuthPermission(c)
}

// PutAuthPermission operation middleware
func (siw *ServerInterfaceWrapper) PutAuthPermission(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutAuthPermission(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.DELETE(options.BaseURL+"/auth/permission", wrapper.DeleteAuthPermission)
	router.GET(options.BaseURL+"/auth/permission", wrapper.GetAuthPermission)
	router.POST(options.BaseURL+"/auth/permission", wrapper.PostAuthPermission)
	router.PUT(options.BaseURL+"/auth/permission", wrapper.PutAuthPermission)
}
