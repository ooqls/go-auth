// Package gen_authorization_users provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package gen_authorization_users

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/gin-gonic/gin"
	externalRef0 "github.com/ooqls/go-auth/api/v1/gen"
)

// CreateUserRequest defines model for CreateUserRequest.
type CreateUserRequest struct {
	User externalRef0.User `json:"user"`
}

// CreateUserResponse defines model for CreateUserResponse.
type CreateUserResponse struct {
	User externalRef0.User `json:"user"`
}

// DeleteAuthUserJSONRequestBody defines body for DeleteAuthUser for application/json ContentType.
type DeleteAuthUserJSONRequestBody = externalRef0.DeleteRequest

// PostAuthUserJSONRequestBody defines body for PostAuthUser for application/json ContentType.
type PostAuthUserJSONRequestBody = CreateUserRequest

// PutAuthUserJSONRequestBody defines body for PutAuthUser for application/json ContentType.
type PutAuthUserJSONRequestBody = externalRef0.UpdateRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// DeleteAuthUserWithBody request with any body
	DeleteAuthUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteAuthUser(ctx context.Context, body DeleteAuthUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAuthUser request
	GetAuthUser(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAuthUserWithBody request with any body
	PostAuthUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAuthUser(ctx context.Context, body PostAuthUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAuthUserWithBody request with any body
	PutAuthUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAuthUser(ctx context.Context, body PutAuthUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) DeleteAuthUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAuthUserRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAuthUser(ctx context.Context, body DeleteAuthUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAuthUserRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAuthUser(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAuthUserRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAuthUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthUserRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAuthUser(ctx context.Context, body PostAuthUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthUserRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAuthUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAuthUserRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAuthUser(ctx context.Context, body PutAuthUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAuthUserRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewDeleteAuthUserRequest calls the generic DeleteAuthUser builder with application/json body
func NewDeleteAuthUserRequest(server string, body DeleteAuthUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteAuthUserRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteAuthUserRequestWithBody generates requests for DeleteAuthUser with any type of body
func NewDeleteAuthUserRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAuthUserRequest generates requests for GetAuthUser
func NewGetAuthUserRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAuthUserRequest calls the generic PostAuthUser builder with application/json body
func NewPostAuthUserRequest(server string, body PostAuthUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAuthUserRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAuthUserRequestWithBody generates requests for PostAuthUser with any type of body
func NewPostAuthUserRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutAuthUserRequest calls the generic PutAuthUser builder with application/json body
func NewPutAuthUserRequest(server string, body PutAuthUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAuthUserRequestWithBody(server, "application/json", bodyReader)
}

// NewPutAuthUserRequestWithBody generates requests for PutAuthUser with any type of body
func NewPutAuthUserRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// DeleteAuthUserWithBodyWithResponse request with any body
	DeleteAuthUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteAuthUserResponse, error)

	DeleteAuthUserWithResponse(ctx context.Context, body DeleteAuthUserJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteAuthUserResponse, error)

	// GetAuthUserWithResponse request
	GetAuthUserWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAuthUserResponse, error)

	// PostAuthUserWithBodyWithResponse request with any body
	PostAuthUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAuthUserResponse, error)

	PostAuthUserWithResponse(ctx context.Context, body PostAuthUserJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAuthUserResponse, error)

	// PutAuthUserWithBodyWithResponse request with any body
	PutAuthUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAuthUserResponse, error)

	PutAuthUserWithResponse(ctx context.Context, body PutAuthUserJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAuthUserResponse, error)
}

type DeleteAuthUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *externalRef0.DeleteResponse
}

// Status returns HTTPResponse.Status
func (r DeleteAuthUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAuthUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAuthUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]externalRef0.User
}

// Status returns HTTPResponse.Status
func (r GetAuthUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAuthUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAuthUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreateUserResponse
}

// Status returns HTTPResponse.Status
func (r PostAuthUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAuthUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAuthUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *externalRef0.User
}

// Status returns HTTPResponse.Status
func (r PutAuthUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAuthUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// DeleteAuthUserWithBodyWithResponse request with arbitrary body returning *DeleteAuthUserResponse
func (c *ClientWithResponses) DeleteAuthUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteAuthUserResponse, error) {
	rsp, err := c.DeleteAuthUserWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAuthUserResponse(rsp)
}

func (c *ClientWithResponses) DeleteAuthUserWithResponse(ctx context.Context, body DeleteAuthUserJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteAuthUserResponse, error) {
	rsp, err := c.DeleteAuthUser(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAuthUserResponse(rsp)
}

// GetAuthUserWithResponse request returning *GetAuthUserResponse
func (c *ClientWithResponses) GetAuthUserWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAuthUserResponse, error) {
	rsp, err := c.GetAuthUser(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAuthUserResponse(rsp)
}

// PostAuthUserWithBodyWithResponse request with arbitrary body returning *PostAuthUserResponse
func (c *ClientWithResponses) PostAuthUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAuthUserResponse, error) {
	rsp, err := c.PostAuthUserWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthUserResponse(rsp)
}

func (c *ClientWithResponses) PostAuthUserWithResponse(ctx context.Context, body PostAuthUserJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAuthUserResponse, error) {
	rsp, err := c.PostAuthUser(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthUserResponse(rsp)
}

// PutAuthUserWithBodyWithResponse request with arbitrary body returning *PutAuthUserResponse
func (c *ClientWithResponses) PutAuthUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAuthUserResponse, error) {
	rsp, err := c.PutAuthUserWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAuthUserResponse(rsp)
}

func (c *ClientWithResponses) PutAuthUserWithResponse(ctx context.Context, body PutAuthUserJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAuthUserResponse, error) {
	rsp, err := c.PutAuthUser(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAuthUserResponse(rsp)
}

// ParseDeleteAuthUserResponse parses an HTTP response from a DeleteAuthUserWithResponse call
func ParseDeleteAuthUserResponse(rsp *http.Response) (*DeleteAuthUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAuthUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.DeleteResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAuthUserResponse parses an HTTP response from a GetAuthUserWithResponse call
func ParseGetAuthUserResponse(rsp *http.Response) (*GetAuthUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAuthUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []externalRef0.User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAuthUserResponse parses an HTTP response from a PostAuthUserWithResponse call
func ParsePostAuthUserResponse(rsp *http.Response) (*PostAuthUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAuthUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateUserResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutAuthUserResponse parses an HTTP response from a PutAuthUserWithResponse call
func ParsePutAuthUserResponse(rsp *http.Response) (*PutAuthUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAuthUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (DELETE /auth/user)
	DeleteAuthUser(c *gin.Context)

	// (GET /auth/user)
	GetAuthUser(c *gin.Context)

	// (POST /auth/user)
	PostAuthUser(c *gin.Context)

	// (PUT /auth/user)
	PutAuthUser(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// DeleteAuthUser operation middleware
func (siw *ServerInterfaceWrapper) DeleteAuthUser(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteAuthUser(c)
}

// GetAuthUser operation middleware
func (siw *ServerInterfaceWrapper) GetAuthUser(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAuthUser(c)
}

// PostAuthUser operation middleware
func (siw *ServerInterfaceWrapper) PostAuthUser(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostAuthUser(c)
}

// PutAuthUser operation middleware
func (siw *ServerInterfaceWrapper) PutAuthUser(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutAuthUser(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.DELETE(options.BaseURL+"/auth/user", wrapper.DeleteAuthUser)
	router.GET(options.BaseURL+"/auth/user", wrapper.GetAuthUser)
	router.POST(options.BaseURL+"/auth/user", wrapper.PostAuthUser)
	router.PUT(options.BaseURL+"/auth/user", wrapper.PutAuthUser)
}
