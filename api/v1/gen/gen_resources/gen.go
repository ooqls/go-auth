// Package gen_authorization_resources provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package gen_authorization_resources

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/gin-gonic/gin"
	externalRef0 "github.com/ooqls/go-auth/api/v1/gen"
)

// CreateResourceRequest defines model for CreateResourceRequest.
type CreateResourceRequest struct {
	Resource externalRef0.Resource `json:"resource"`
}

// CreateResourceResponse defines model for CreateResourceResponse.
type CreateResourceResponse struct {
	Resource externalRef0.Resource `json:"resource"`
}

// DeleteAuthResourceJSONRequestBody defines body for DeleteAuthResource for application/json ContentType.
type DeleteAuthResourceJSONRequestBody = externalRef0.DeleteRequest

// PostAuthResourceJSONRequestBody defines body for PostAuthResource for application/json ContentType.
type PostAuthResourceJSONRequestBody = CreateResourceRequest

// PutAuthResourceJSONRequestBody defines body for PutAuthResource for application/json ContentType.
type PutAuthResourceJSONRequestBody = externalRef0.UpdateRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// DeleteAuthResourceWithBody request with any body
	DeleteAuthResourceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteAuthResource(ctx context.Context, body DeleteAuthResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAuthResource request
	GetAuthResource(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAuthResourceWithBody request with any body
	PostAuthResourceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAuthResource(ctx context.Context, body PostAuthResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAuthResourceWithBody request with any body
	PutAuthResourceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAuthResource(ctx context.Context, body PutAuthResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) DeleteAuthResourceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAuthResourceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAuthResource(ctx context.Context, body DeleteAuthResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAuthResourceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAuthResource(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAuthResourceRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAuthResourceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthResourceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAuthResource(ctx context.Context, body PostAuthResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthResourceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAuthResourceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAuthResourceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAuthResource(ctx context.Context, body PutAuthResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAuthResourceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewDeleteAuthResourceRequest calls the generic DeleteAuthResource builder with application/json body
func NewDeleteAuthResourceRequest(server string, body DeleteAuthResourceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteAuthResourceRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteAuthResourceRequestWithBody generates requests for DeleteAuthResource with any type of body
func NewDeleteAuthResourceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/resource")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAuthResourceRequest generates requests for GetAuthResource
func NewGetAuthResourceRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/resource")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAuthResourceRequest calls the generic PostAuthResource builder with application/json body
func NewPostAuthResourceRequest(server string, body PostAuthResourceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAuthResourceRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAuthResourceRequestWithBody generates requests for PostAuthResource with any type of body
func NewPostAuthResourceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/resource")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutAuthResourceRequest calls the generic PutAuthResource builder with application/json body
func NewPutAuthResourceRequest(server string, body PutAuthResourceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAuthResourceRequestWithBody(server, "application/json", bodyReader)
}

// NewPutAuthResourceRequestWithBody generates requests for PutAuthResource with any type of body
func NewPutAuthResourceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/resource")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// DeleteAuthResourceWithBodyWithResponse request with any body
	DeleteAuthResourceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteAuthResourceResponse, error)

	DeleteAuthResourceWithResponse(ctx context.Context, body DeleteAuthResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteAuthResourceResponse, error)

	// GetAuthResourceWithResponse request
	GetAuthResourceWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAuthResourceResponse, error)

	// PostAuthResourceWithBodyWithResponse request with any body
	PostAuthResourceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAuthResourceResponse, error)

	PostAuthResourceWithResponse(ctx context.Context, body PostAuthResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAuthResourceResponse, error)

	// PutAuthResourceWithBodyWithResponse request with any body
	PutAuthResourceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAuthResourceResponse, error)

	PutAuthResourceWithResponse(ctx context.Context, body PutAuthResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAuthResourceResponse, error)
}

type DeleteAuthResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *externalRef0.DeleteResponse
}

// Status returns HTTPResponse.Status
func (r DeleteAuthResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAuthResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAuthResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]externalRef0.Resource
}

// Status returns HTTPResponse.Status
func (r GetAuthResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAuthResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAuthResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreateResourceResponse
}

// Status returns HTTPResponse.Status
func (r PostAuthResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAuthResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAuthResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *externalRef0.Resource
}

// Status returns HTTPResponse.Status
func (r PutAuthResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAuthResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// DeleteAuthResourceWithBodyWithResponse request with arbitrary body returning *DeleteAuthResourceResponse
func (c *ClientWithResponses) DeleteAuthResourceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteAuthResourceResponse, error) {
	rsp, err := c.DeleteAuthResourceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAuthResourceResponse(rsp)
}

func (c *ClientWithResponses) DeleteAuthResourceWithResponse(ctx context.Context, body DeleteAuthResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteAuthResourceResponse, error) {
	rsp, err := c.DeleteAuthResource(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAuthResourceResponse(rsp)
}

// GetAuthResourceWithResponse request returning *GetAuthResourceResponse
func (c *ClientWithResponses) GetAuthResourceWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAuthResourceResponse, error) {
	rsp, err := c.GetAuthResource(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAuthResourceResponse(rsp)
}

// PostAuthResourceWithBodyWithResponse request with arbitrary body returning *PostAuthResourceResponse
func (c *ClientWithResponses) PostAuthResourceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAuthResourceResponse, error) {
	rsp, err := c.PostAuthResourceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthResourceResponse(rsp)
}

func (c *ClientWithResponses) PostAuthResourceWithResponse(ctx context.Context, body PostAuthResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAuthResourceResponse, error) {
	rsp, err := c.PostAuthResource(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthResourceResponse(rsp)
}

// PutAuthResourceWithBodyWithResponse request with arbitrary body returning *PutAuthResourceResponse
func (c *ClientWithResponses) PutAuthResourceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAuthResourceResponse, error) {
	rsp, err := c.PutAuthResourceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAuthResourceResponse(rsp)
}

func (c *ClientWithResponses) PutAuthResourceWithResponse(ctx context.Context, body PutAuthResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAuthResourceResponse, error) {
	rsp, err := c.PutAuthResource(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAuthResourceResponse(rsp)
}

// ParseDeleteAuthResourceResponse parses an HTTP response from a DeleteAuthResourceWithResponse call
func ParseDeleteAuthResourceResponse(rsp *http.Response) (*DeleteAuthResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAuthResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.DeleteResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAuthResourceResponse parses an HTTP response from a GetAuthResourceWithResponse call
func ParseGetAuthResourceResponse(rsp *http.Response) (*GetAuthResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAuthResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []externalRef0.Resource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAuthResourceResponse parses an HTTP response from a PostAuthResourceWithResponse call
func ParsePostAuthResourceResponse(rsp *http.Response) (*PostAuthResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAuthResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateResourceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutAuthResourceResponse parses an HTTP response from a PutAuthResourceWithResponse call
func ParsePutAuthResourceResponse(rsp *http.Response) (*PutAuthResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAuthResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.Resource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (DELETE /auth/resource)
	DeleteAuthResource(c *gin.Context)

	// (GET /auth/resource)
	GetAuthResource(c *gin.Context)

	// (POST /auth/resource)
	PostAuthResource(c *gin.Context)

	// (PUT /auth/resource)
	PutAuthResource(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// DeleteAuthResource operation middleware
func (siw *ServerInterfaceWrapper) DeleteAuthResource(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteAuthResource(c)
}

// GetAuthResource operation middleware
func (siw *ServerInterfaceWrapper) GetAuthResource(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAuthResource(c)
}

// PostAuthResource operation middleware
func (siw *ServerInterfaceWrapper) PostAuthResource(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostAuthResource(c)
}

// PutAuthResource operation middleware
func (siw *ServerInterfaceWrapper) PutAuthResource(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutAuthResource(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.DELETE(options.BaseURL+"/auth/resource", wrapper.DeleteAuthResource)
	router.GET(options.BaseURL+"/auth/resource", wrapper.GetAuthResource)
	router.POST(options.BaseURL+"/auth/resource", wrapper.PostAuthResource)
	router.PUT(options.BaseURL+"/auth/resource", wrapper.PutAuthResource)
}
