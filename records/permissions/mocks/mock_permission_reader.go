// Code generated by MockGen. DO NOT EDIT.
// Source: permission_reader.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	permissions "github.com/ooqls/go-auth/records/permissions"
)

// MockPermissionReader is a mock of PermissionReader interface.
type MockPermissionReader struct {
	ctrl     *gomock.Controller
	recorder *MockPermissionReaderMockRecorder
}

// MockPermissionReaderMockRecorder is the mock recorder for MockPermissionReader.
type MockPermissionReaderMockRecorder struct {
	mock *MockPermissionReader
}

// NewMockPermissionReader creates a new mock instance.
func NewMockPermissionReader(ctrl *gomock.Controller) *MockPermissionReader {
	mock := &MockPermissionReader{ctrl: ctrl}
	mock.recorder = &MockPermissionReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPermissionReader) EXPECT() *MockPermissionReaderMockRecorder {
	return m.recorder
}

// GetPermission mocks base method.
func (m *MockPermissionReader) GetPermission(ctx context.Context, id permissions.PermissionId) (*permissions.Permission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPermission", ctx, id)
	ret0, _ := ret[0].(*permissions.Permission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPermission indicates an expected call of GetPermission.
func (mr *MockPermissionReaderMockRecorder) GetPermission(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPermission", reflect.TypeOf((*MockPermissionReader)(nil).GetPermission), ctx, id)
}

// GetPermissions mocks base method.
func (m *MockPermissionReader) GetPermissions(ctx context.Context, limit, offset int32) ([]permissions.Permission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPermissions", ctx, limit, offset)
	ret0, _ := ret[0].([]permissions.Permission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPermissions indicates an expected call of GetPermissions.
func (mr *MockPermissionReaderMockRecorder) GetPermissions(ctx, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPermissions", reflect.TypeOf((*MockPermissionReader)(nil).GetPermissions), ctx, limit, offset)
}

// GetPermissionsByFilter mocks base method.
func (m *MockPermissionReader) GetPermissionsByFilter(ctx context.Context, group, kind, name string, limit, offset int32) ([]permissions.Permission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPermissionsByFilter", ctx, group, kind, name, limit, offset)
	ret0, _ := ret[0].([]permissions.Permission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPermissionsByFilter indicates an expected call of GetPermissionsByFilter.
func (mr *MockPermissionReaderMockRecorder) GetPermissionsByFilter(ctx, group, kind, name, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPermissionsByFilter", reflect.TypeOf((*MockPermissionReader)(nil).GetPermissionsByFilter), ctx, group, kind, name, limit, offset)
}

// GetPermissionsForRole mocks base method.
func (m *MockPermissionReader) GetPermissionsForRole(ctx context.Context, roleId permissions.RoleId) ([]permissions.Permission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPermissionsForRole", ctx, roleId)
	ret0, _ := ret[0].([]permissions.Permission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPermissionsForRole indicates an expected call of GetPermissionsForRole.
func (mr *MockPermissionReaderMockRecorder) GetPermissionsForRole(ctx, roleId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPermissionsForRole", reflect.TypeOf((*MockPermissionReader)(nil).GetPermissionsForRole), ctx, roleId)
}
