// Code generated by MockGen. DO NOT EDIT.
// Source: role_writer.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	roles "github.com/ooqls/go-auth/records/roles"
)

// MockWriter is a mock of Writer interface.
type MockWriter struct {
	ctrl     *gomock.Controller
	recorder *MockWriterMockRecorder
}

// MockWriterMockRecorder is the mock recorder for MockWriter.
type MockWriterMockRecorder struct {
	mock *MockWriter
}

// NewMockWriter creates a new mock instance.
func NewMockWriter(ctrl *gomock.Controller) *MockWriter {
	mock := &MockWriter{ctrl: ctrl}
	mock.recorder = &MockWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWriter) EXPECT() *MockWriterMockRecorder {
	return m.recorder
}

// AddRoleToUser mocks base method.
func (m *MockWriter) AddRoleToUser(ctx context.Context, userId, roleId uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRoleToUser", ctx, userId, roleId)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRoleToUser indicates an expected call of AddRoleToUser.
func (mr *MockWriterMockRecorder) AddRoleToUser(ctx, userId, roleId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRoleToUser", reflect.TypeOf((*MockWriter)(nil).AddRoleToUser), ctx, userId, roleId)
}

// CreateRole mocks base method.
func (m *MockWriter) CreateRole(ctx context.Context, r roles.Role) (*roles.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRole", ctx, r)
	ret0, _ := ret[0].(*roles.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRole indicates an expected call of CreateRole.
func (mr *MockWriterMockRecorder) CreateRole(ctx, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRole", reflect.TypeOf((*MockWriter)(nil).CreateRole), ctx, r)
}

// DeleteRole mocks base method.
func (m *MockWriter) DeleteRole(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRole", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRole indicates an expected call of DeleteRole.
func (mr *MockWriterMockRecorder) DeleteRole(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRole", reflect.TypeOf((*MockWriter)(nil).DeleteRole), ctx, id)
}

// RemoveRoleFromUser mocks base method.
func (m *MockWriter) RemoveRoleFromUser(ctx context.Context, userId, roleId uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveRoleFromUser", ctx, userId, roleId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveRoleFromUser indicates an expected call of RemoveRoleFromUser.
func (mr *MockWriterMockRecorder) RemoveRoleFromUser(ctx, userId, roleId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRoleFromUser", reflect.TypeOf((*MockWriter)(nil).RemoveRoleFromUser), ctx, userId, roleId)
}

// UpdateRole mocks base method.
func (m *MockWriter) UpdateRole(ctx context.Context, id uuid.UUID, r roles.Role) (*roles.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRole", ctx, id, r)
	ret0, _ := ret[0].(*roles.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRole indicates an expected call of UpdateRole.
func (mr *MockWriterMockRecorder) UpdateRole(ctx, id, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRole", reflect.TypeOf((*MockWriter)(nil).UpdateRole), ctx, id, r)
}
