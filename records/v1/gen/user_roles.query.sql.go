// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: user_roles.query.sql

package gen

import (
	"context"

	"github.com/google/uuid"
)

const addRoleToUser = `-- name: AddRoleToUser :exec
INSERT INTO authv1_user_roles (user_id, role_id) VALUES ($1, $2)
`

type AddRoleToUserParams struct {
	UserID uuid.UUID
	RoleID uuid.UUID
}

func (q *Queries) AddRoleToUser(ctx context.Context, arg AddRoleToUserParams) error {
	_, err := q.db.ExecContext(ctx, addRoleToUser, arg.UserID, arg.RoleID)
	return err
}

const getRolesForUser = `-- name: GetRolesForUser :many
SELECT r.id, r.domain, r.role_name, r.role_hierarchy, r.description, r.created_at, r.updated_at FROM authv1_roles r LEFT JOIN authv1_user_roles u ON r.id = u.role_id WHERE u.user_id = $1
`

func (q *Queries) GetRolesForUser(ctx context.Context, userID uuid.UUID) ([]Authv1Role, error) {
	rows, err := q.db.QueryContext(ctx, getRolesForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Authv1Role
	for rows.Next() {
		var i Authv1Role
		if err := rows.Scan(
			&i.ID,
			&i.Domain,
			&i.RoleName,
			&i.RoleHierarchy,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeRoleFromUser = `-- name: RemoveRoleFromUser :exec
DELETE FROM authv1_user_roles WHERE user_id = $1 AND role_id = $2
`

type RemoveRoleFromUserParams struct {
	UserID uuid.UUID
	RoleID uuid.UUID
}

func (q *Queries) RemoveRoleFromUser(ctx context.Context, arg RemoveRoleFromUserParams) error {
	_, err := q.db.ExecContext(ctx, removeRoleFromUser, arg.UserID, arg.RoleID)
	return err
}
