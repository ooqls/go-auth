// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: challenge_attempts.query.sql

package gen

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createChallengeAttempt = `-- name: CreateChallengeAttempt :exec
INSERT INTO authv1_challenge_attempts (challenge_id, user_id, success) VALUES ($1, $2, $3)
`

type CreateChallengeAttemptParams struct {
	ChallengeID uuid.UUID
	UserID      uuid.UUID
	Success     bool
}

func (q *Queries) CreateChallengeAttempt(ctx context.Context, arg CreateChallengeAttemptParams) error {
	_, err := q.db.ExecContext(ctx, createChallengeAttempt, arg.ChallengeID, arg.UserID, arg.Success)
	return err
}

const getChallengeAttempts = `-- name: GetChallengeAttempts :many
SELECT id, challenge_id, user_id, success, created_at
FROM authv1_challenge_attempts
WHERE user_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetChallengeAttempts(ctx context.Context, userID uuid.UUID) ([]Authv1ChallengeAttempt, error) {
	rows, err := q.db.QueryContext(ctx, getChallengeAttempts, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Authv1ChallengeAttempt
	for rows.Next() {
		var i Authv1ChallengeAttempt
		if err := rows.Scan(
			&i.ID,
			&i.ChallengeID,
			&i.UserID,
			&i.Success,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFailedAttempts = `-- name: GetFailedAttempts :many
SELECT id, challenge_id, user_id, success, created_at
FROM authv1_challenge_attempts
WHERE user_id = $1 AND success = FALSE AND created_at >= NOW() - ($2 || ' minutes')::interval
ORDER BY created_at DESC
`

type GetFailedAttemptsParams struct {
	UserID  uuid.UUID
	Minutes sql.NullString
}

func (q *Queries) GetFailedAttempts(ctx context.Context, arg GetFailedAttemptsParams) ([]Authv1ChallengeAttempt, error) {
	rows, err := q.db.QueryContext(ctx, getFailedAttempts, arg.UserID, arg.Minutes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Authv1ChallengeAttempt
	for rows.Next() {
		var i Authv1ChallengeAttempt
		if err := rows.Scan(
			&i.ID,
			&i.ChallengeID,
			&i.UserID,
			&i.Success,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
