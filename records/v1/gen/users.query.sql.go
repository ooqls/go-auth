// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.query.sql

package gen

import (
	"context"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO authv1_users (
  id,
  username,
  email,
  salt,
  key
) VALUES (
  $1,
  $2,
  $3,
  $4,
  $5
) RETURNING id, username, email, key, salt, created_at, updated_at
`

type CreateUserParams struct {
	ID       uuid.UUID
	Username string
	Email    string
	Salt     []byte
	Key      []byte
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (Authv1User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.Username,
		arg.Email,
		arg.Salt,
		arg.Key,
	)
	var i Authv1User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Key,
		&i.Salt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM authv1_users WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, username, email, key, salt, created_at, updated_at FROM authv1_users WHERE id = $1
`

func (q *Queries) GetUser(ctx context.Context, id uuid.UUID) (Authv1User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i Authv1User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Key,
		&i.Salt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, email, key, salt, created_at, updated_at FROM authv1_users WHERE username = $1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (Authv1User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i Authv1User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Key,
		&i.Salt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, username, email, key, salt, created_at, updated_at FROM authv1_users ORDER BY username LIMIT $1 OFFSET $2
`

type ListUsersParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]Authv1User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Authv1User
	for rows.Next() {
		var i Authv1User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.Key,
			&i.Salt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchUsers = `-- name: SearchUsers :many
SELECT id, username, email, key, salt, created_at, updated_at FROM authv1_users WHERE username ILIKE $1 ORDER BY username LIMIT $2 OFFSET $3
`

type SearchUsersParams struct {
	Username string
	Limit    int32
	Offset   int32
}

func (q *Queries) SearchUsers(ctx context.Context, arg SearchUsersParams) ([]Authv1User, error) {
	rows, err := q.db.QueryContext(ctx, searchUsers, arg.Username, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Authv1User
	for rows.Next() {
		var i Authv1User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.Key,
			&i.Salt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :exec
UPDATE authv1_users SET
  username = $1,
  email = $2,
  key = $3,
  updated_at = now()
WHERE id = $4
`

type UpdateUserParams struct {
	Username string
	Email    string
	Key      []byte
	ID       uuid.UUID
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.Username,
		arg.Email,
		arg.Key,
		arg.ID,
	)
	return err
}
