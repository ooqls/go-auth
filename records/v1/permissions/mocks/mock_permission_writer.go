// Code generated by MockGen. DO NOT EDIT.
// Source: permission_writer.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	permissions "github.com/ooqls/go-auth/records/v1/permissions"
)

// MockPermissionWriter is a mock of PermissionWriter interface.
type MockPermissionWriter struct {
	ctrl     *gomock.Controller
	recorder *MockPermissionWriterMockRecorder
}

// MockPermissionWriterMockRecorder is the mock recorder for MockPermissionWriter.
type MockPermissionWriterMockRecorder struct {
	mock *MockPermissionWriter
}

// NewMockPermissionWriter creates a new mock instance.
func NewMockPermissionWriter(ctrl *gomock.Controller) *MockPermissionWriter {
	mock := &MockPermissionWriter{ctrl: ctrl}
	mock.recorder = &MockPermissionWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPermissionWriter) EXPECT() *MockPermissionWriterMockRecorder {
	return m.recorder
}

// AddPermissionToRole mocks base method.
func (m *MockPermissionWriter) AddPermissionToRole(ctx context.Context, roleId permissions.RoleId, permissionId permissions.PermissionId) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPermissionToRole", ctx, roleId, permissionId)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPermissionToRole indicates an expected call of AddPermissionToRole.
func (mr *MockPermissionWriterMockRecorder) AddPermissionToRole(ctx, roleId, permissionId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPermissionToRole", reflect.TypeOf((*MockPermissionWriter)(nil).AddPermissionToRole), ctx, roleId, permissionId)
}

// CreatePermission mocks base method.
func (m *MockPermissionWriter) CreatePermission(ctx context.Context, p permissions.Permission) (*permissions.Permission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePermission", ctx, p)
	ret0, _ := ret[0].(*permissions.Permission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePermission indicates an expected call of CreatePermission.
func (mr *MockPermissionWriterMockRecorder) CreatePermission(ctx, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePermission", reflect.TypeOf((*MockPermissionWriter)(nil).CreatePermission), ctx, p)
}

// DeletePermission mocks base method.
func (m *MockPermissionWriter) DeletePermission(ctx context.Context, id permissions.PermissionId) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePermission", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePermission indicates an expected call of DeletePermission.
func (mr *MockPermissionWriterMockRecorder) DeletePermission(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePermission", reflect.TypeOf((*MockPermissionWriter)(nil).DeletePermission), ctx, id)
}

// RemovePermissionFromRole mocks base method.
func (m *MockPermissionWriter) RemovePermissionFromRole(ctx context.Context, roleId permissions.RoleId, permissionId permissions.PermissionId) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePermissionFromRole", ctx, roleId, permissionId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemovePermissionFromRole indicates an expected call of RemovePermissionFromRole.
func (mr *MockPermissionWriterMockRecorder) RemovePermissionFromRole(ctx, roleId, permissionId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePermissionFromRole", reflect.TypeOf((*MockPermissionWriter)(nil).RemovePermissionFromRole), ctx, roleId, permissionId)
}

// UpdatePermission mocks base method.
func (m *MockPermissionWriter) UpdatePermission(ctx context.Context, id permissions.PermissionId, p permissions.Permission) (*permissions.Permission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePermission", ctx, id, p)
	ret0, _ := ret[0].(*permissions.Permission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePermission indicates an expected call of UpdatePermission.
func (mr *MockPermissionWriterMockRecorder) UpdatePermission(ctx, id, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePermission", reflect.TypeOf((*MockPermissionWriter)(nil).UpdatePermission), ctx, id, p)
}
