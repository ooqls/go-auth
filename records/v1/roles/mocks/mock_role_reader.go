// Code generated by MockGen. DO NOT EDIT.
// Source: role_reader.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	roles "github.com/ooqls/go-auth/records/v1/roles"
)

// MockReader is a mock of Reader interface.
type MockReader struct {
	ctrl     *gomock.Controller
	recorder *MockReaderMockRecorder
}

// MockReaderMockRecorder is the mock recorder for MockReader.
type MockReaderMockRecorder struct {
	mock *MockReader
}

// NewMockReader creates a new mock instance.
func NewMockReader(ctrl *gomock.Controller) *MockReader {
	mock := &MockReader{ctrl: ctrl}
	mock.recorder = &MockReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReader) EXPECT() *MockReaderMockRecorder {
	return m.recorder
}

// GetRole mocks base method.
func (m *MockReader) GetRole(ctx context.Context, id uuid.UUID) (*roles.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRole", ctx, id)
	ret0, _ := ret[0].(*roles.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRole indicates an expected call of GetRole.
func (mr *MockReaderMockRecorder) GetRole(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRole", reflect.TypeOf((*MockReader)(nil).GetRole), ctx, id)
}

// GetRoleByName mocks base method.
func (m *MockReader) GetRoleByName(ctx context.Context, name string) (*roles.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoleByName", ctx, name)
	ret0, _ := ret[0].(*roles.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoleByName indicates an expected call of GetRoleByName.
func (mr *MockReaderMockRecorder) GetRoleByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleByName", reflect.TypeOf((*MockReader)(nil).GetRoleByName), ctx, name)
}

// GetRoles mocks base method.
func (m *MockReader) GetRoles(ctx context.Context, limit, offset int32) ([]roles.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoles", ctx, limit, offset)
	ret0, _ := ret[0].([]roles.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoles indicates an expected call of GetRoles.
func (mr *MockReaderMockRecorder) GetRoles(ctx, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoles", reflect.TypeOf((*MockReader)(nil).GetRoles), ctx, limit, offset)
}

// GetRolesForUser mocks base method.
func (m *MockReader) GetRolesForUser(ctx context.Context, userId roles.UserId) ([]roles.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRolesForUser", ctx, userId)
	ret0, _ := ret[0].([]roles.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRolesForUser indicates an expected call of GetRolesForUser.
func (mr *MockReaderMockRecorder) GetRolesForUser(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRolesForUser", reflect.TypeOf((*MockReader)(nil).GetRolesForUser), ctx, userId)
}
