// Code generated by MockGen. DO NOT EDIT.
// Source: challenge_attempts.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	challengeattempts "github.com/ooqls/go-auth/records/v1/challengeattempts"
)

// MockReader is a mock of Reader interface.
type MockReader struct {
	ctrl     *gomock.Controller
	recorder *MockReaderMockRecorder
}

// MockReaderMockRecorder is the mock recorder for MockReader.
type MockReaderMockRecorder struct {
	mock *MockReader
}

// NewMockReader creates a new mock instance.
func NewMockReader(ctrl *gomock.Controller) *MockReader {
	mock := &MockReader{ctrl: ctrl}
	mock.recorder = &MockReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReader) EXPECT() *MockReaderMockRecorder {
	return m.recorder
}

// GetChallengeAttempts mocks base method.
func (m *MockReader) GetChallengeAttempts(ctx context.Context, userID string) ([]challengeattempts.ChallengeAttempt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChallengeAttempts", ctx, userID)
	ret0, _ := ret[0].([]challengeattempts.ChallengeAttempt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChallengeAttempts indicates an expected call of GetChallengeAttempts.
func (mr *MockReaderMockRecorder) GetChallengeAttempts(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChallengeAttempts", reflect.TypeOf((*MockReader)(nil).GetChallengeAttempts), ctx, userID)
}

// GetFailedAttempts mocks base method.
func (m *MockReader) GetFailedAttempts(ctx context.Context, userID string, minutes int) ([]challengeattempts.ChallengeAttempt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFailedAttempts", ctx, userID, minutes)
	ret0, _ := ret[0].([]challengeattempts.ChallengeAttempt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFailedAttempts indicates an expected call of GetFailedAttempts.
func (mr *MockReaderMockRecorder) GetFailedAttempts(ctx, userID, minutes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFailedAttempts", reflect.TypeOf((*MockReader)(nil).GetFailedAttempts), ctx, userID, minutes)
}

// MockWriter is a mock of Writer interface.
type MockWriter struct {
	ctrl     *gomock.Controller
	recorder *MockWriterMockRecorder
}

// MockWriterMockRecorder is the mock recorder for MockWriter.
type MockWriterMockRecorder struct {
	mock *MockWriter
}

// NewMockWriter creates a new mock instance.
func NewMockWriter(ctrl *gomock.Controller) *MockWriter {
	mock := &MockWriter{ctrl: ctrl}
	mock.recorder = &MockWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWriter) EXPECT() *MockWriterMockRecorder {
	return m.recorder
}

// CreateChallengeAttempt mocks base method.
func (m *MockWriter) CreateChallengeAttempt(ctx context.Context, challengeAttempt challengeattempts.ChallengeAttempt) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChallengeAttempt", ctx, challengeAttempt)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateChallengeAttempt indicates an expected call of CreateChallengeAttempt.
func (mr *MockWriterMockRecorder) CreateChallengeAttempt(ctx, challengeAttempt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChallengeAttempt", reflect.TypeOf((*MockWriter)(nil).CreateChallengeAttempt), ctx, challengeAttempt)
}
