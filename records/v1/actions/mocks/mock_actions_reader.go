// Code generated by MockGen. DO NOT EDIT.
// Source: actions_reader.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	actions "github.com/ooqls/go-auth/records/v1/actions"
)

// MockReader is a mock of Reader interface.
type MockReader struct {
	ctrl     *gomock.Controller
	recorder *MockReaderMockRecorder
}

// MockReaderMockRecorder is the mock recorder for MockReader.
type MockReaderMockRecorder struct {
	mock *MockReader
}

// NewMockReader creates a new mock instance.
func NewMockReader(ctrl *gomock.Controller) *MockReader {
	mock := &MockReader{ctrl: ctrl}
	mock.recorder = &MockReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReader) EXPECT() *MockReaderMockRecorder {
	return m.recorder
}

// GetActionsForUserByResource mocks base method.
func (m *MockReader) GetActionsForUserByResource(ctx context.Context, id actions.UserId, group actions.Group, kind actions.Kind, name string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActionsForUserByResource", ctx, id, group, kind, name)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActionsForUserByResource indicates an expected call of GetActionsForUserByResource.
func (mr *MockReaderMockRecorder) GetActionsForUserByResource(ctx, id, group, kind, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActionsForUserByResource", reflect.TypeOf((*MockReader)(nil).GetActionsForUserByResource), ctx, id, group, kind, name)
}
