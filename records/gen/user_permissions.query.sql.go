// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: user_permissions.query.sql

package gen

import (
	"context"

	"github.com/google/uuid"
)

const getActionsForUserByResource = `-- name: GetActionsForUserByResource :many
SELECT p.actions FROM authv1_permissions p
  LEFT JOIN authv1_role_permissions rp ON p.id = rp.permission_id
  LEFT JOIN authv1_user_roles ur ON rp.role_id = ur.role_id
  WHERE ur.user_id = $1 AND p.resource_group = $2 AND p.resource_kind = $3 AND p.resource_name = $4
`

type GetActionsForUserByResourceParams struct {
	UserID        uuid.UUID
	ResourceGroup string
	ResourceKind  string
	ResourceName  string
}

func (q *Queries) GetActionsForUserByResource(ctx context.Context, arg GetActionsForUserByResourceParams) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getActionsForUserByResource,
		arg.UserID,
		arg.ResourceGroup,
		arg.ResourceKind,
		arg.ResourceName,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var actions string
		if err := rows.Scan(&actions); err != nil {
			return nil, err
		}
		items = append(items, actions)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
