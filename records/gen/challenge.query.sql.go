// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: challenge.query.sql

package gen

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createChallenge = `-- name: CreateChallenge :one
INSERT INTO authv1_challenges (user_id, challenge, salt, expires_at)
VALUES ($1, $2, $3, $4)
RETURNING id, user_id, challenge, salt, created_at, expires_at
`

type CreateChallengeParams struct {
	UserID    uuid.UUID
	Challenge string
	Salt      []byte
	ExpiresAt time.Time
}

func (q *Queries) CreateChallenge(ctx context.Context, arg CreateChallengeParams) (Authv1Challenge, error) {
	row := q.db.QueryRowContext(ctx, createChallenge,
		arg.UserID,
		arg.Challenge,
		arg.Salt,
		arg.ExpiresAt,
	)
	var i Authv1Challenge
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Challenge,
		&i.Salt,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const getChallenge = `-- name: GetChallenge :one
SELECT id, user_id, challenge, salt, created_at, expires_at
FROM authv1_challenges
WHERE id = $1 AND expires_at > NOW()
ORDER BY created_at DESC
`

func (q *Queries) GetChallenge(ctx context.Context, id uuid.UUID) (Authv1Challenge, error) {
	row := q.db.QueryRowContext(ctx, getChallenge, id)
	var i Authv1Challenge
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Challenge,
		&i.Salt,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}
