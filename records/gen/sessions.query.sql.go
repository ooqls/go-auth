// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: sessions.query.sql

package gen

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createSession = `-- name: CreateSession :one
INSERT INTO authv1_sessions (
  user_id,
  token,
  expires_at
) VALUES (
  $1,
  $2,
  $3
) RETURNING id, user_id, token, created_at, expires_at
`

type CreateSessionParams struct {
	UserID    uuid.UUID
	Token     string
	ExpiresAt time.Time
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Authv1Session, error) {
	row := q.db.QueryRowContext(ctx, createSession, arg.UserID, arg.Token, arg.ExpiresAt)
	var i Authv1Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM authv1_sessions WHERE id = $1
`

func (q *Queries) DeleteSession(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteSession, id)
	return err
}

const getSession = `-- name: GetSession :one
SELECT id, user_id, token, created_at, expires_at FROM authv1_sessions WHERE id = $1
`

func (q *Queries) GetSession(ctx context.Context, id uuid.UUID) (Authv1Session, error) {
	row := q.db.QueryRowContext(ctx, getSession, id)
	var i Authv1Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const listSessions = `-- name: ListSessions :many
SELECT id, user_id, token, created_at, expires_at FROM authv1_sessions ORDER BY created_at LIMIT $1 OFFSET $2
`

type ListSessionsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListSessions(ctx context.Context, arg ListSessionsParams) ([]Authv1Session, error) {
	rows, err := q.db.QueryContext(ctx, listSessions, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Authv1Session
	for rows.Next() {
		var i Authv1Session
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Token,
			&i.CreatedAt,
			&i.ExpiresAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSession = `-- name: UpdateSession :exec
UPDATE authv1_sessions SET
  user_id = $1,
  token = $2,
  expires_at = $3
WHERE id = $4
`

type UpdateSessionParams struct {
	UserID    uuid.UUID
	Token     string
	ExpiresAt time.Time
	ID        uuid.UUID
}

func (q *Queries) UpdateSession(ctx context.Context, arg UpdateSessionParams) error {
	_, err := q.db.ExecContext(ctx, updateSession,
		arg.UserID,
		arg.Token,
		arg.ExpiresAt,
		arg.ID,
	)
	return err
}
