// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: role_permissions.query.sql

package gen

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const addPermissionToRole = `-- name: AddPermissionToRole :exec
INSERT INTO authv1_role_permissions (role_id, permission_id) VALUES ($1, $2)
`

type AddPermissionToRoleParams struct {
	RoleID       uuid.UUID
	PermissionID uuid.UUID
}

func (q *Queries) AddPermissionToRole(ctx context.Context, arg AddPermissionToRoleParams) error {
	_, err := q.db.ExecContext(ctx, addPermissionToRole, arg.RoleID, arg.PermissionID)
	return err
}

const getRolePermissions = `-- name: GetRolePermissions :many
SELECT id, resource_kind, resource_group, resource_name, p.created_at, p.updated_at, actions, role_id, permission_id, r.created_at, r.updated_at FROM authv1_permissions p LEFT JOIN authv1_role_permissions r ON p.id = r.permission_id AND r.role_id = $1
`

type GetRolePermissionsRow struct {
	ID            uuid.UUID
	ResourceKind  string
	ResourceGroup string
	ResourceName  string
	CreatedAt     time.Time
	UpdatedAt     time.Time
	Actions       string
	RoleID        uuid.NullUUID
	PermissionID  uuid.NullUUID
	CreatedAt_2   sql.NullTime
	UpdatedAt_2   sql.NullTime
}

func (q *Queries) GetRolePermissions(ctx context.Context, roleID uuid.UUID) ([]GetRolePermissionsRow, error) {
	rows, err := q.db.QueryContext(ctx, getRolePermissions, roleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetRolePermissionsRow
	for rows.Next() {
		var i GetRolePermissionsRow
		if err := rows.Scan(
			&i.ID,
			&i.ResourceKind,
			&i.ResourceGroup,
			&i.ResourceName,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Actions,
			&i.RoleID,
			&i.PermissionID,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removePermissionFromRole = `-- name: RemovePermissionFromRole :exec
DELETE FROM authv1_role_permissions WHERE role_id = $1 AND permission_id = $2
`

type RemovePermissionFromRoleParams struct {
	RoleID       uuid.UUID
	PermissionID uuid.UUID
}

func (q *Queries) RemovePermissionFromRole(ctx context.Context, arg RemovePermissionFromRoleParams) error {
	_, err := q.db.ExecContext(ctx, removePermissionFromRole, arg.RoleID, arg.PermissionID)
	return err
}
