// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: permissions.query.sql

package gen

import (
	"context"

	"github.com/google/uuid"
)

const createPermission = `-- name: CreatePermission :one
INSERT INTO authv1_permissions (resource_name, resource_kind, resource_group, actions)
VALUES ($1, $2, $3, $4)
RETURNING id, resource_name, actions
`

type CreatePermissionParams struct {
	ResourceName  string
	ResourceKind  string
	ResourceGroup string
	Actions       string
}

type CreatePermissionRow struct {
	ID           uuid.UUID
	ResourceName string
	Actions      string
}

func (q *Queries) CreatePermission(ctx context.Context, arg CreatePermissionParams) (CreatePermissionRow, error) {
	row := q.db.QueryRowContext(ctx, createPermission,
		arg.ResourceName,
		arg.ResourceKind,
		arg.ResourceGroup,
		arg.Actions,
	)
	var i CreatePermissionRow
	err := row.Scan(&i.ID, &i.ResourceName, &i.Actions)
	return i, err
}

const deletePermission = `-- name: DeletePermission :exec
DELETE FROM authv1_permissions
WHERE id = $1
`

func (q *Queries) DeletePermission(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deletePermission, id)
	return err
}

const getPermissionByID = `-- name: GetPermissionByID :one
SELECT id, resource_name, resource_kind, resource_group, actions
FROM authv1_permissions
WHERE id = $1
`

type GetPermissionByIDRow struct {
	ID            uuid.UUID
	ResourceName  string
	ResourceKind  string
	ResourceGroup string
	Actions       string
}

func (q *Queries) GetPermissionByID(ctx context.Context, id uuid.UUID) (GetPermissionByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getPermissionByID, id)
	var i GetPermissionByIDRow
	err := row.Scan(
		&i.ID,
		&i.ResourceName,
		&i.ResourceKind,
		&i.ResourceGroup,
		&i.Actions,
	)
	return i, err
}

const getPermissions = `-- name: GetPermissions :many
SELECT id, resource_kind, resource_group, resource_name, created_at, updated_at, actions FROM authv1_permissions ORDER BY updated_at LIMIT $1 OFFSET $2
`

type GetPermissionsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetPermissions(ctx context.Context, arg GetPermissionsParams) ([]Authv1Permission, error) {
	rows, err := q.db.QueryContext(ctx, getPermissions, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Authv1Permission
	for rows.Next() {
		var i Authv1Permission
		if err := rows.Scan(
			&i.ID,
			&i.ResourceKind,
			&i.ResourceGroup,
			&i.ResourceName,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Actions,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPermissionsByFilter = `-- name: GetPermissionsByFilter :many
SELECT id, resource_name, resource_kind, resource_group, actions
FROM authv1_permissions
WHERE resource_name = $1 OR resource_kind = $2 OR resource_group = $3
ORDER BY updated_at LIMIT $4 OFFSET $5
`

type GetPermissionsByFilterParams struct {
	ResourceName  string
	ResourceKind  string
	ResourceGroup string
	Limit         int32
	Offset        int32
}

type GetPermissionsByFilterRow struct {
	ID            uuid.UUID
	ResourceName  string
	ResourceKind  string
	ResourceGroup string
	Actions       string
}

func (q *Queries) GetPermissionsByFilter(ctx context.Context, arg GetPermissionsByFilterParams) ([]GetPermissionsByFilterRow, error) {
	rows, err := q.db.QueryContext(ctx, getPermissionsByFilter,
		arg.ResourceName,
		arg.ResourceKind,
		arg.ResourceGroup,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPermissionsByFilterRow
	for rows.Next() {
		var i GetPermissionsByFilterRow
		if err := rows.Scan(
			&i.ID,
			&i.ResourceName,
			&i.ResourceKind,
			&i.ResourceGroup,
			&i.Actions,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPermissionsByGroupKind = `-- name: GetPermissionsByGroupKind :many
SELECT id, resource_name, resource_kind, resource_group, actions
FROM authv1_permissions
WHERE resource_group = $1 AND resource_kind = $2
ORDER BY updated_at LIMIT $3 OFFSET $4
`

type GetPermissionsByGroupKindParams struct {
	ResourceGroup string
	ResourceKind  string
	Limit         int32
	Offset        int32
}

type GetPermissionsByGroupKindRow struct {
	ID            uuid.UUID
	ResourceName  string
	ResourceKind  string
	ResourceGroup string
	Actions       string
}

func (q *Queries) GetPermissionsByGroupKind(ctx context.Context, arg GetPermissionsByGroupKindParams) ([]GetPermissionsByGroupKindRow, error) {
	rows, err := q.db.QueryContext(ctx, getPermissionsByGroupKind,
		arg.ResourceGroup,
		arg.ResourceKind,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPermissionsByGroupKindRow
	for rows.Next() {
		var i GetPermissionsByGroupKindRow
		if err := rows.Scan(
			&i.ID,
			&i.ResourceName,
			&i.ResourceKind,
			&i.ResourceGroup,
			&i.Actions,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPermissionsByResourceGroup = `-- name: GetPermissionsByResourceGroup :many
SELECT id, resource_name, resource_kind, resource_group, actions
FROM authv1_permissions
WHERE resource_group = $1
ORDER BY updated_at LIMIT $2 OFFSET $3
`

type GetPermissionsByResourceGroupParams struct {
	ResourceGroup string
	Limit         int32
	Offset        int32
}

type GetPermissionsByResourceGroupRow struct {
	ID            uuid.UUID
	ResourceName  string
	ResourceKind  string
	ResourceGroup string
	Actions       string
}

func (q *Queries) GetPermissionsByResourceGroup(ctx context.Context, arg GetPermissionsByResourceGroupParams) ([]GetPermissionsByResourceGroupRow, error) {
	rows, err := q.db.QueryContext(ctx, getPermissionsByResourceGroup, arg.ResourceGroup, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPermissionsByResourceGroupRow
	for rows.Next() {
		var i GetPermissionsByResourceGroupRow
		if err := rows.Scan(
			&i.ID,
			&i.ResourceName,
			&i.ResourceKind,
			&i.ResourceGroup,
			&i.Actions,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPermissionsByRoleID = `-- name: GetPermissionsByRoleID :many
SELECT p.id, p.resource_name, p.resource_kind, p.resource_group, p.actions
FROM authv1_permissions p
  LEFT JOIN authv1_role_permissions r ON p.id = r.permission_id
WHERE r.role_id = $1
ORDER BY p.updated_at LIMIT $2 OFFSET $3
`

type GetPermissionsByRoleIDParams struct {
	RoleID uuid.UUID
	Limit  int32
	Offset int32
}

type GetPermissionsByRoleIDRow struct {
	ID            uuid.UUID
	ResourceName  string
	ResourceKind  string
	ResourceGroup string
	Actions       string
}

func (q *Queries) GetPermissionsByRoleID(ctx context.Context, arg GetPermissionsByRoleIDParams) ([]GetPermissionsByRoleIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getPermissionsByRoleID, arg.RoleID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPermissionsByRoleIDRow
	for rows.Next() {
		var i GetPermissionsByRoleIDRow
		if err := rows.Scan(
			&i.ID,
			&i.ResourceName,
			&i.ResourceKind,
			&i.ResourceGroup,
			&i.Actions,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePermission = `-- name: UpdatePermission :one
UPDATE authv1_permissions
SET resource_name = $1,
    resource_kind = $2,
    resource_group = $3,
    actions = $4,
    updated_at = now()
WHERE id = $5
RETURNING id, resource_kind, resource_group, resource_name, created_at, updated_at, actions
`

type UpdatePermissionParams struct {
	ResourceName  string
	ResourceKind  string
	ResourceGroup string
	Actions       string
	ID            uuid.UUID
}

func (q *Queries) UpdatePermission(ctx context.Context, arg UpdatePermissionParams) (Authv1Permission, error) {
	row := q.db.QueryRowContext(ctx, updatePermission,
		arg.ResourceName,
		arg.ResourceKind,
		arg.ResourceGroup,
		arg.Actions,
		arg.ID,
	)
	var i Authv1Permission
	err := row.Scan(
		&i.ID,
		&i.ResourceKind,
		&i.ResourceGroup,
		&i.ResourceName,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Actions,
	)
	return i, err
}
