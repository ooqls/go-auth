// Code generated by MockGen. DO NOT EDIT.
// Source: challenges.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	loginchallenges "github.com/ooqls/go-auth/records/login_challenges"
)

// MockReader is a mock of Reader interface.
type MockReader struct {
	ctrl     *gomock.Controller
	recorder *MockReaderMockRecorder
}

// MockReaderMockRecorder is the mock recorder for MockReader.
type MockReaderMockRecorder struct {
	mock *MockReader
}

// NewMockReader creates a new mock instance.
func NewMockReader(ctrl *gomock.Controller) *MockReader {
	mock := &MockReader{ctrl: ctrl}
	mock.recorder = &MockReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReader) EXPECT() *MockReaderMockRecorder {
	return m.recorder
}

// GetChallenge mocks base method.
func (m *MockReader) GetChallenge(ctx context.Context, userID uuid.UUID) (*loginchallenges.Challenge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChallenge", ctx, userID)
	ret0, _ := ret[0].(*loginchallenges.Challenge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChallenge indicates an expected call of GetChallenge.
func (mr *MockReaderMockRecorder) GetChallenge(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChallenge", reflect.TypeOf((*MockReader)(nil).GetChallenge), ctx, userID)
}

// MockWriter is a mock of Writer interface.
type MockWriter struct {
	ctrl     *gomock.Controller
	recorder *MockWriterMockRecorder
}

// MockWriterMockRecorder is the mock recorder for MockWriter.
type MockWriterMockRecorder struct {
	mock *MockWriter
}

// NewMockWriter creates a new mock instance.
func NewMockWriter(ctrl *gomock.Controller) *MockWriter {
	mock := &MockWriter{ctrl: ctrl}
	mock.recorder = &MockWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWriter) EXPECT() *MockWriterMockRecorder {
	return m.recorder
}

// CreateChallenge mocks base method.
func (m *MockWriter) CreateChallenge(ctx context.Context, userID uuid.UUID, salt []byte) (*loginchallenges.Challenge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChallenge", ctx, userID, salt)
	ret0, _ := ret[0].(*loginchallenges.Challenge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChallenge indicates an expected call of CreateChallenge.
func (mr *MockWriterMockRecorder) CreateChallenge(ctx, userID, salt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChallenge", reflect.TypeOf((*MockWriter)(nil).CreateChallenge), ctx, userID, salt)
}
