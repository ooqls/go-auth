// Code generated by MockGen. DO NOT EDIT.
// Source: challenger.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	authentication "github.com/ooqls/go-auth/domain/v1/authentication"
	users "github.com/ooqls/go-auth/records/v1/users"
)

// MockChallenger is a mock of Challenger interface.
type MockChallenger struct {
	ctrl     *gomock.Controller
	recorder *MockChallengerMockRecorder
}

// MockChallengerMockRecorder is the mock recorder for MockChallenger.
type MockChallengerMockRecorder struct {
	mock *MockChallenger
}

// NewMockChallenger creates a new mock instance.
func NewMockChallenger(ctrl *gomock.Controller) *MockChallenger {
	mock := &MockChallenger{ctrl: ctrl}
	mock.recorder = &MockChallengerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChallenger) EXPECT() *MockChallengerMockRecorder {
	return m.recorder
}

// IssueChallenge mocks base method.
func (m *MockChallenger) IssueChallenge(ctx context.Context, user *users.User) (*authentication.Challenge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IssueChallenge", ctx, user)
	ret0, _ := ret[0].(*authentication.Challenge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IssueChallenge indicates an expected call of IssueChallenge.
func (mr *MockChallengerMockRecorder) IssueChallenge(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IssueChallenge", reflect.TypeOf((*MockChallenger)(nil).IssueChallenge), ctx, user)
}

// VerifyChallenge mocks base method.
func (m *MockChallenger) VerifyChallenge(ctx context.Context, challengeId uuid.UUID, solvedChallenge []byte) (*authentication.AuthedResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyChallenge", ctx, challengeId, solvedChallenge)
	ret0, _ := ret[0].(*authentication.AuthedResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyChallenge indicates an expected call of VerifyChallenge.
func (mr *MockChallengerMockRecorder) VerifyChallenge(ctx, challengeId, solvedChallenge interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyChallenge", reflect.TypeOf((*MockChallenger)(nil).VerifyChallenge), ctx, challengeId, solvedChallenge)
}

// VerifyRegistration mocks base method.
func (m *MockChallenger) VerifyRegistration(ctx context.Context, username string, secret, key []byte) ([16]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyRegistration", ctx, username, secret, key)
	ret0, _ := ret[0].([16]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyRegistration indicates an expected call of VerifyRegistration.
func (mr *MockChallengerMockRecorder) VerifyRegistration(ctx, username, secret, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyRegistration", reflect.TypeOf((*MockChallenger)(nil).VerifyRegistration), ctx, username, secret, key)
}
